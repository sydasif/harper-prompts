# ---------------------------------------------------------------------------
# Command: /project:plan
#
# Description:
#   Generates a series of prompts for a code-generation LLM to implement
#   a project. It creates a detailed, step-by-step blueprint and breaks
#   it down into small, incremental chunks to guide the implementation
#   process. With the --ttd flag, it follows a Test-Driven Development
#   approach instead.
#
# Usage Example:
#   /project:plan
#   /project:plan --ttd
# ---------------------------------------------------------------------------

name = "project:plan"
description = "Generates a series of prompts for a code-generation LLM to implement a project with an optional TDD approach"

prompt = """
Project file: `specification.md`

Draft a detailed, step-by-step blueprint for building this project.
Then, once you have a solid plan, break it down into small, iterative chunks that build on each other.
Look at these chunks and then go another round to break it into small steps.
Review the results and make sure that the steps are small enough to be implemented safely,
but big enough to move the project forward. Iterate until you feel that the steps are right sized for this project.

From here you should have the foundation to provide a series of prompts for a code-generation LLM that will implement each step.

{{#if args.includes('--ttd')}}
# TDD Approach

Follow a test-driven development approach:

- Prioritize creating tests first for each component/feature
- Ensure no big jumps in complexity at any stage
- Make sure that each prompt builds on the previous prompts, beginning with writing tests
- There should be no hanging or orphaned code that isn't integrated into a previous step
- Prioritize incremental progress and early testing, ensuring no big jumps in complexity at any stage. Make sure that each prompt builds on the previous prompts, and ends with wiring things together. There should be no hanging or orphaned code that isn't integrated into a previous step.

Make sure and separate each prompt section.
Use markdown. Each prompt should be tagged as text using code tags.
The goal is to output prompts, but context, etc is important as well.

```
{{args}}
```

Save the output as: `ttd-planning.md`

{{else}}
# Regular Approach

Prioritize best practices, and incremental progress, ensuring no big jumps in complexity at any stage.
Make sure that each prompt builds on the previous prompts, and ends with wiring things together.
There should be no hanging or orphaned code that isn't integrated into a previous step.

Make sure and separate each prompt section.
Use markdown. Each prompt should be tagged as text using code tags.
The goal is to output prompts, but context, etc is important as well.

```
{{args}}
```

Store the plan in `planing.md`.
{{/if}}
"""
