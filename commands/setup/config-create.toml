# ---------------------------------------------------------------------------
# Command: /project:config-create
#
# Description:
#   Creates a harper.config.toml file in the current directory with
#   customizable settings. This is optional - all commands work without it.
#
# Usage Example:
#   /project:config-create
#   /project:config-create --minimal
#   /project:config-create python
# ---------------------------------------------------------------------------

name = "project:config-create"
description = "Creates an optional harper.config.toml file in your project"

prompt = """
I'll create a `harper.config.toml` file in your current directory to customize Harper Prompts behavior.

**Note:** This is completely optional! All commands work fine without a config file using sensible defaults.

{{#if args.includes('--minimal')}}
## Creating Minimal Configuration

I'll create a minimal config with just the essential settings:

```toml
[standards]
# Add your language-specific settings here when needed

[workflow]
approach = "incremental"  # Options: incremental, tdd
auto_test = true
auto_lint = true

[quality]
min_test_coverage = 80
```

{{else if args.includes('python')}}
## Creating Python Project Configuration

```toml
[standards.python]
enabled = true
package_manager = "uv"
test_framework = "pytest"
linters = ["ruff", "mypy"]
formatter = "black"
type_checking = true

[workflow]
approach = "tdd"
auto_test = true
auto_lint = true
require_passing_tests = true

[quality]
max_complexity = 10
min_test_coverage = 80
require_type_hints = true
```

{{else if args.includes('javascript') or args.includes('typescript')}}
## Creating JavaScript/TypeScript Project Configuration

```toml
[standards.javascript]
enabled = true
package_manager = "npm"
test_framework = "jest"
linters = ["eslint"]
formatter = "prettier"
type_checking = true
typescript = true

[workflow]
approach = "tdd"
auto_test = true
auto_lint = true
require_passing_tests = true

[quality]
max_complexity = 10
min_test_coverage = 80
```

{{else if args.includes('go')}}
## Creating Go Project Configuration

```toml
[standards.go]
enabled = true
test_framework = "testing"
linters = ["golangci-lint"]
formatter = "gofmt"

[workflow]
approach = "incremental"
auto_test = true
auto_lint = true

[quality]
max_complexity = 10
min_test_coverage = 80
```

{{else if args.includes('rust')}}
## Creating Rust Project Configuration

```toml
[standards.rust]
enabled = true
package_manager = "cargo"
test_framework = "builtin"
linters = ["clippy"]
formatter = "rustfmt"

[workflow]
approach = "incremental"
auto_test = true
auto_lint = true

[quality]
max_complexity = 10
min_test_coverage = 80
```

{{else}}
## Creating Custom Configuration

I'll create a comprehensive config file with all available options.

Choose your setup:
- `/project:config-create --minimal` - Just the basics
- `/project:config-create python` - Python project
- `/project:config-create typescript` - TypeScript project
- `/project:config-create go` - Go project
- `/project:config-create rust` - Rust project

Or I can create a full config with all options documented.

### Full Configuration Template

```toml
# Harper Prompts Configuration
# This file is optional - delete it to use defaults

[project]
name = "My Project"

[standards.python]
enabled = true
package_manager = "uv"
test_framework = "pytest"
linters = ["ruff", "mypy"]
formatter = "black"

[workflow]
approach = "incremental"  # Options: incremental, tdd, rapid
auto_test = true
auto_lint = true
require_passing_tests = true

[quality]
max_complexity = 10
max_function_length = 50
min_test_coverage = 80

[review]
require_careful_review = true
require_security_review = false
check_missing_tests = true

[files]
spec_file = "spec.md"
plan_file = "plan.md"
todo_file = "todo.md"
```

{{/if}}

---

## What This Config Does

✅ **Customizes defaults** for your project
✅ **Sets code quality standards** (test coverage, complexity limits)
✅ **Configures workflows** (TDD vs incremental, auto-testing)
✅ **Language-specific settings** (package managers, test frameworks)

## Important Notes

- **Optional**: Commands work without this file
- **Project-specific**: Each project can have its own config
- **Git-friendly**: Commit it to share standards with your team
- **Override anytime**: Delete the file to return to defaults

Should I create this config file?

```
{{args}}
```
"""
