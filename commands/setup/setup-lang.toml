# ---------------------------------------------------------------------------
# Command: /project:setup-lang
#
# Description:
#   Configures language-specific standards and tooling for the project.
#   Supports Python, JavaScript/TypeScript, Go, Rust, Java, and more.
#
# Usage Example:
#   /project:setup-lang python
#   /project:setup-lang typescript --strict
#   /project:setup-lang go
# ---------------------------------------------------------------------------

name = "project:setup-lang"
description = "Configures language-specific standards and tooling"

prompt = """
I'll help you set up language-specific standards and tooling for your project.

# Language-Specific Configuration

{{#if args.includes('python')}}
## Python Project Setup

### Package Management
- **Tool**: `uv` (modern, fast Python package manager)
- **Alternative**: `pip` + `venv` for traditional setup
- **Configuration**: `pyproject.toml`

### Commands:
```bash
# Install uv
curl -LsSf https://astral.sh/uv/install.sh | sh

# Initialize project
uv init

# Add packages
uv add <package-name>

# Run scripts
uv run <script.py>

# Run with specific Python version
uv run --python 3.11 <script.py>
```

### Project Structure:
```
project/
├── pyproject.toml          # Package configuration
├── src/
│   └── <package_name>/
│       ├── __init__.py
│       └── main.py
├── tests/
│   ├── __init__.py
│   └── test_main.py
├── README.md
└── .gitignore
```

### Testing
- **Framework**: `pytest`
- **Installation**: `uv add --dev pytest pytest-cov`
- **Run tests**: `uv run pytest`
- **With coverage**: `uv run pytest --cov=src tests/`

### Linting & Formatting
- **Linter**: `ruff` (fast, modern linter)
- **Formatter**: `black` or `ruff format`
- **Type Checker**: `mypy`
- **Installation**: `uv add --dev ruff mypy black`

### Commands:
```bash
# Lint code
uv run ruff check .

# Format code
uv run black .
# or
uv run ruff format .

# Type check
uv run mypy src/
```

### Standards Applied:
- Use type hints for all functions
- Follow PEP 8 style guide
- Minimum test coverage: 80%
- Docstrings for all public functions (Google style)
- Error handling with specific exceptions

{{else if args.includes('javascript') or args.includes('typescript') or args.includes('node')}}
## JavaScript/TypeScript Project Setup

### Package Management
- **Tool**: `npm`, `yarn`, `pnpm`, or `bun`
- **Configuration**: `package.json`

{{#if args.includes('typescript')}}
### TypeScript Setup
```bash
# Initialize project
npm init -y
npm install --save-dev typescript @types/node

# Initialize TypeScript config
npx tsc --init
```

### tsconfig.json (strict mode):
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```
{{/if}}

### Project Structure:
```
project/
├── package.json
├── tsconfig.json (if TypeScript)
├── src/
│   ├── index.ts
│   └── lib/
├── tests/
│   └── index.test.ts
├── README.md
└── .gitignore
```

### Testing
- **Framework**: `jest` or `vitest`
- **Installation**: `npm install --save-dev jest @types/jest`
- **Run tests**: `npm test`

### Linting & Formatting
- **Linter**: `eslint`
- **Formatter**: `prettier`
- **Installation**:
```bash
npm install --save-dev eslint prettier eslint-config-prettier
npx eslint --init
```

### Standards Applied:
- Use TypeScript for type safety (if applicable)
- Follow Airbnb or Standard style guide
- Minimum test coverage: 80%
- JSDoc comments for public functions
- Async/await for asynchronous operations
- Proper error handling with custom error classes

{{else if args.includes('go')}}
## Go Project Setup

### Module Initialization
```bash
go mod init <module-name>
```

### Project Structure:
```
project/
├── go.mod
├── go.sum
├── cmd/
│   └── myapp/
│       └── main.go
├── internal/
│   └── pkg/
├── pkg/
├── tests/
└── README.md
```

### Testing
- **Framework**: Built-in `testing` package
- **Run tests**: `go test ./...`
- **With coverage**: `go test -cover ./...`
- **Benchmarks**: `go test -bench=. ./...`

### Linting & Formatting
- **Formatter**: `gofmt` or `goimports`
- **Linter**: `golangci-lint`

### Commands:
```bash
# Format code
go fmt ./...
goimports -w .

# Lint code
golangci-lint run

# Build
go build -o bin/myapp cmd/myapp/main.go

# Run
go run cmd/myapp/main.go
```

### Standards Applied:
- Follow Go idioms and conventions
- Use interfaces for abstraction
- Proper error handling (return errors, don't panic)
- Write table-driven tests
- Document all exported functions

{{else if args.includes('rust')}}
## Rust Project Setup

### Cargo Initialization
```bash
cargo new <project-name>
# or for library
cargo new --lib <project-name>
```

### Project Structure:
```
project/
├── Cargo.toml
├── Cargo.lock
├── src/
│   ├── main.rs (or lib.rs)
│   └── lib/
├── tests/
├── benches/
└── README.md
```

### Testing
- **Framework**: Built-in
- **Run tests**: `cargo test`
- **With output**: `cargo test -- --nocapture`
- **Benchmarks**: `cargo bench`

### Linting & Formatting
- **Formatter**: `rustfmt`
- **Linter**: `clippy`

### Commands:
```bash
# Format code
cargo fmt

# Lint code
cargo clippy

# Build
cargo build --release

# Run
cargo run
```

### Standards Applied:
- Use Rust idioms (ownership, borrowing)
- Leverage type system for safety
- Comprehensive error handling with `Result` and `Option`
- Write unit and integration tests
- Document all public APIs

{{else if args.includes('java')}}
## Java Project Setup

### Build Tool
- **Maven** or **Gradle**

### Maven Setup:
```bash
mvn archetype:generate \
  -DgroupId=com.example \
  -DartifactId=myapp \
  -DarchetypeArtifactId=maven-archetype-quickstart
```

### Project Structure:
```
project/
├── pom.xml (Maven) or build.gradle (Gradle)
├── src/
│   ├── main/
│   │   ├── java/
│   │   └── resources/
│   └── test/
│       ├── java/
│       └── resources/
└── README.md
```

### Testing
- **Framework**: JUnit 5
- **Run tests**: `mvn test` or `gradle test`

### Standards Applied:
- Follow Java naming conventions
- Use dependency injection
- Write unit tests with JUnit
- Document with JavaDoc
- Proper exception handling

{{else}}
## General Project Setup

Please specify a language:
- `/project:setup-lang python`
- `/project:setup-lang typescript`
- `/project:setup-lang javascript`
- `/project:setup-lang go`
- `/project:setup-lang rust`
- `/project:setup-lang java`

I can help set up standards and tooling for:
- Python
- JavaScript/TypeScript
- Go
- Rust
- Java
- C#
- Ruby
- PHP
- And more...

{{/if}}

## Next Steps

1. **Initialize Project**: Run the initialization commands shown above
2. **Update Configuration**: Customize `harper.config.toml` for this language
3. **Set Up CI/CD**: Configure automated testing and linting
4. **Begin Development**: Use `/project:init` to start your project planning

```
{{args}}
```
"""
