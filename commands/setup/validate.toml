# ---------------------------------------------------------------------------
# Command: /project:validate
#
# Description:
#   Validates that required files exist before proceeding with project commands.
#   Checks for spec.md, plan files, and other dependencies.
#
# Usage Example:
#   /project:validate
#   /project:validate --check-spec
#   /project:validate --check-plan
# ---------------------------------------------------------------------------

name = "project:validate"
description = "Validates project files and dependencies exist before executing commands"

prompt = """
I'll validate the project structure and required files for you.

{{#if args.includes('--check-spec')}}
# Validating Specification File

Checking for the existence of `spec.md` file...

If the file exists:
- ‚úÖ spec.md found
- Verify it contains the following sections:
  - Functional Requirements
  - Non-Functional Requirements
  - Architecture
  - Data Handling
  - Error Handling
  - Testing Plan

If the file is missing:
- ‚ùå spec.md not found
- Run `/project:init` followed by `/project:compile` to create it

{{else if args.includes('--check-plan')}}
# Validating Plan Files

Checking for plan files...

Looking for:
- `plan.md` (regular development approach)
- `ttd-plan.md` (test-driven development approach)

If neither exists:
- ‚ùå No plan file found
- Run `/project:plan` or `/project:plan --ttd` to create one

If found:
- ‚úÖ Plan file exists
- Verify it contains properly formatted prompts with code blocks
- Check that prompts build incrementally on each other

{{else}}
# Full Project Validation

Running comprehensive project validation...

## 1. Configuration Files
- [ ] Check for `.gitignore`
- [ ] Check for package management files (pyproject.toml for Python, package.json for Node, etc.)

## 2. Specification & Planning
- [ ] Check for `spec.md` (run `/project:init` and `/project:compile` if missing)
- [ ] Check for `plan.md` or `ttd-plan.md` (run `/project:plan` if missing)
- [ ] Check for `todo.md` (run `/project:todo` if missing)

## 3. Dependencies
For Python projects:
- [ ] Verify `uv` is available (command: `uv --version`)
- [ ] Check `pyproject.toml` exists and is valid

For Node projects:
- [ ] Check `package.json` exists
- [ ] Verify dependencies are installed

## 4. Testing Setup
- [ ] Check for test directory structure
- [ ] Verify test framework is configured
- [ ] Check that tests can be run

## 5. Code Quality Tools
- [ ] Check for linting configuration (.eslintrc, .pylintrc, etc.)
- [ ] Check for formatting configuration (.prettierrc, .black, etc.)

## Validation Results

After checking, I'll provide:
1. ‚úÖ Items that are properly configured
2. ‚ùå Missing items with specific commands to fix them
3. ‚ö†Ô∏è Items that exist but may need attention
4. üìù Recommended next steps based on project state

{{/if}}

What would you like me to validate?
```
{{args}}
```
"""
